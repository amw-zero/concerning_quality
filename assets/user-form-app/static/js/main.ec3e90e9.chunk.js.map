{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["allUsers","name","searchResults","UserForm","users","onSearch","onClick","map","asset","App","useState","showingUserForm","setShowingUserForm","setUsers","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNAOMA,G,MAAmB,CACvB,CAAEC,KAAM,UACR,CAAEA,KAAM,YAGJC,EAAwB,CAC5B,CAAED,KAAM,WAQV,SAASE,EAAT,GAAuD,IAAnCC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,SACzB,OAAO,gCACL,wBAAQC,QAAS,kBAAOD,EAASH,IAAjC,SAAkD,qBACjDE,EAAMG,KAAK,SAAAC,GACV,OAAO,4BAAIA,EAAMP,aAyBRQ,MApBf,WAAgB,IAAD,EAC+BC,oBAAS,GADxC,mBACRC,EADQ,KACSC,EADT,OAEWF,mBAASV,GAFpB,mBAERI,EAFQ,KAEDS,EAFC,KASb,OACE,sBAAKC,UAAU,MAAf,UAII,wBAAQR,QAAS,kBAAMM,GAAoBD,IAA3C,SAA8D,gBAC/DA,GAAmB,cAACR,EAAD,CAAUC,MAAOA,EAAOC,SAAUQ,QC/B7CE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ec3e90e9.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\ntype User = {\n  name: string\n}\n\nconst allUsers: User[] = [\n  { name: \"User 1\" },\n  { name: \"User 2\" }\n];\n\nconst searchResults: User[] = [\n  { name: \"User 2\"}\n];\n\ntype UserFormProps = {\n  users: User[],\n  onSearch: (users: User[]) => void\n}\n\nfunction UserForm({ users, onSearch }: UserFormProps) {\n  return <div>\n    <button onClick={() =>  onSearch(searchResults)}>{\"Search for Users\"}</button>\n    {users.map((asset => {\n      return <p>{asset.name}</p>\n    }))}\n  </div>;\n}\n\nfunction App() {\n  let [showingUserForm, setShowingUserForm] = useState(false);\n  let [users, setUsers] = useState(allUsers);\n\n  function toggleUserForm() {\n    setShowingUserForm(!showingUserForm);\n    setUsers(allUsers);\n  }\n\n  return (\n    <div className=\"App\">\n      {/* Working version\n        <button onClick={() => toggleUserForm()}>{\"Toggle Form\"}</button>*/}\n      {// Buggy version\n        <button onClick={() => setShowingUserForm(!showingUserForm)}>{\"Toggle Form\"}</button>}\n      {showingUserForm && <UserForm users={users} onSearch={setUsers}/>}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}